### Requerimientos  

En este caso, vamos a usar *GPG* para protegerlos, si no tienes `gpg` instalada en tu Mac, la puedes instalar con `
brew install gpg`.

Una contrase√±a (vamos a llamarla `DECRYPT_KEY`) para encriptar archivos mediante *gpg*, te recomiendo que sea generada autom√°ticamente. Gen√©rala y tenla a la mano porque la vamos a utilizar unas cuantas veces en este post.

### Obteniendo un certificado de publicaci√≥n para iOS
Te recomiendo generar un certificado de publicaci√≥n para cada app que desarrolles, aunque, este certificado lo puedes compartir entre varias, puesto que este certificado te identifica a ti como quien publica la app. En este caso, ser√° el servidor de GitHub el que publique y al que tu le estar√°s dando permiso de autenticarse como tu.

Para generar un certificado nuevo, visita https://developer.apple.com/account/resources/certificates/list

![Imgur](https://imgur.com/b6T6YYw.png)
![Imgur](https://imgur.com/5qY5Pud.png)
![Imgur](https://imgur.com/8gXr4m8.png)![Imgur](https://i.imgur.com/3oeJOBI.png)
Una vez creado, descarga el certificado e inst√°lalo en tu computadora. Para instalarlo simplemente da doble click en el archivo que acabas de descargar.

![Imgur](https://i.imgur.com/XXThK37.png)
El siguiente paso es crear y descargar un perfil de publicaci√≥n para tu app:
![Imgur](https://i.imgur.com/6CodfmN.png)
![Imgur](https://i.imgur.com/TbrqVrY.png)
![Imgur](https://i.imgur.com/0eCLTi0.png)
![Imgur](https://i.imgur.com/pIKkXbl.png)
![Imgur](https://i.imgur.com/peJlpOZ.png)
Siguiente paso es descargar y abrir el perfil de publicaci√≥n, si Xcode no est√° abierto, el abrir el perfilde publicaci√≥n lo abrir√°. Una vez hecho esto, podemos configurar nuestra app para usarlos al momento de crear el archivo que vamos a publicar en la app store.

## Configura tu app para usar los certificados
![Imgur](https://i.imgur.com/zJGWRBu.png)


## Colocando los certificados en GitHub
 > üö®‚ö†Ô∏è ¬°Mucho cuidado! ¬°aseg√∫rate de no subir ninguno de los siguientes archivos a menos de que est√©n encriptados! ‚ö†Ô∏èüö®

### Exportando el certificado  

![Imgur](https://i.imgur.com/G0pF2C0.png)
![Imgur](https://i.imgur.com/hByhz7g.png)
Guarda el archivo con el nombre `Certificates.p12` dentro de la carpeta `secrets`.

![Imgur](https://i.imgur.com/5gT22K6.png)
### Exportando los perfiles de publicaci√≥n 

Lo primero es descubrir cu√°l es el perfil de publicaci√≥n que corresponde al que acabamos de descargar, para hacerlo, lista los perfiles con el siguiente comando:
```
ls -lah ~/Library/MobileDevice/Provisioning\ Profiles/
```

En este caso, el m√°s reciente es el que corresponde al perfil de publicaci√≥n de nuestra app, tiene el identificador `f3b9e904-6d99-409a-91f4-440c5b79565d`:

![Imgur](https://i.imgur.com/9cEkq9v.png)
El siguiente paso es copiar el perfil a la carpeta `secrets`. 

```
cp ~/Library/MobileDevice/Provisioning\ Profiles/f3b9e904-6d99-409a-91f4-440c5b79565d.mobileprovision secrets
```
Toma nota de este identificador porque lo ver√°s en muchos lados, el m√≠o es `f3b9e904-6d99-409a-91f4-440c5b79565d` pero el tuyo sera diferente.

### Encriptando nuestros secretos  

Como lo mencion√© al inicio de esta secci√≥n, no podemos subir nuestros secretos (l√©ase el certificado y el perfil de publciaci√≥n) as√≠ como as√≠ a GitHub, antes hay que protegerlos mediante la encriptaci√≥n. Usaremos *gpg* y la contrase√±a que creaste al inicio de este post.

```
gpg --symmetric --cipher-algo AES256 Certificates.p12
```

```
gpg --symmetric --cipher-algo AES256 f3b9e904-6d99-409a-91f4-440c5b79565d.mobileprovision
```

```
Certificates.p12.gpg
f3b9e904-6d99-409a-91f4-440c5b79565d.mobileprovision.gpg
```


```
rm Certificates.p12
rm f3b9e904-6d99-409a-91f4-440c5b79565d.mobileprovision
```

### Desencriptando el certificado en GitHub

```bash
#!/bin/sh

# iOS

## Desencriptar los secretos usando el password almacenado en "DECRYPT_KEY"
gpg --quiet --batch --yes --decrypt --passphrase="$DECRYPT_KEY" --output ./secrets/f3b9e904-6d99-409a-91f4-440c5b79565d.mobileprovision ./secrets/f3b9e904-6d99-409a-91f4-440c5b79565d.mobileprovision.gpg
gpg --quiet --batch --yes --decrypt --passphrase="$DECRYPT_KEY" --output ./secrets/Certificates.p12 ./secrets/Certificates.p12.gpg

## Crea la carpeta "Provisioning Profiles" en esta computadora
mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles

## Copia el perfil de publicaci√≥n a la carpeta reci√©n creada
cp ./secrets/f3b9e904-6d99-409a-91f4-440c5b79565d.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/f3b9e904-6d99-409a-91f4-440c5b79565d.mobileprovision

## Crea un Keychain e importa el archivo Certificates.p12
security create-keychain -p "" build.keychain
security import ./secrets/Certificates.p12 -t agg -k ~/Library/Keychains/build.keychain -P "" -A

## Establece el Keychain recien creado como default
security list-keychains -s ~/Library/Keychains/build.keychain
security default-keychain -s ~/Library/Keychains/build.keychain
security unlock-keychain -p "" ~/Library/Keychains/build.keychain
security set-key-partition-list -S apple-tool:,apple: -s -k "" ~/Library/Keychains/build.keychain
```

Dar permisos de ejecuci√≥n
```
chmod +x secrets/decrypt_secrets.sh
```

# Configurando GitHub  

 


